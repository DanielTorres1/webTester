#!/usr/bin/python3
import requests
import warnings
from urllib3.exceptions import InsecureRequestWarning
from time import time
import argparse

# Suppress the InsecureRequestWarning
warnings.filterwarnings("ignore", category=InsecureRequestWarning)

def compare_responses(subdomain, ip_address):
    # Request 1: GET https://banca.cacef.coop/
    try:
        response1 = requests.get(f"https://{subdomain}/", timeout=10, verify=False)
    except requests.exceptions.RequestException as e:
        print(f"")


    # Request 2: GET https://186.121.246.108/ with host header set to banca.cacef.coop
    try:
        response2 = requests.get(f"https://{ip_address}/", headers={"Host": subdomain}, timeout=10, verify=False)
    except requests.exceptions.RequestException as e:
        print(f"")

    # Compare response bodies
    if response1.text == response2.text:
        print("OK")
        return True

    # Request 3: GET http://banca.cacef.coop/
    try:
        response3 = requests.get(f"http://{subdomain}/", timeout=10, verify=False)
    except requests.exceptions.RequestException as e:
        print(f"")

    # Request 4: GET http://186.121.246.108/ with host header set to banca.cacef.coop
    try:
        response4 = requests.get(f"http://{ip_address}/", headers={"Host": subdomain}, timeout=10, verify=False)
    except requests.exceptions.RequestException as e:
        print(f"")

    # Compare response bodies
    if response3.text == response4.text:
        print("OK")
        return True

    print("Responses are not equal")
    return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Compare responses from a subdomain and IP address.")
    parser.add_argument("--subdomain", required=True, help="Subdomain to test")
    parser.add_argument("--ip", required=True, help="IP address to test")
    args = parser.parse_args()

    compare_responses(args.subdomain, args.ip)