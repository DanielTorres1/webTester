#!/usr/bin/python3
import boto3
import argparse
import sys
from urllib.parse import urlparse

# AWS credentials (replace with your actual credentials)
AWS_ACCESS_KEY_ID = 'AKIAVRUVRTWNIBYHWX6J'
AWS_SECRET_ACCESS_KEY = '3eUBKAj5mBqXN3wE7XBoabPe0bE0HBUsLi4y9I2n'

def create_api_gateway(url, name):
    # Parse the URL to ensure it has a scheme
    parsed_url = urlparse(url)
    if not parsed_url.scheme:
        url = 'https://' + url  # Default to https if no scheme is provided
    
    # Ensure the URL ends with a slash
    if not url.endswith('/'):
        url += '/'

    # Initialize the API Gateway client
    client = boto3.client('apigateway',
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
        region_name='us-east-1'  # You can change this to your preferred region
    )

    try:
        # Create the REST API
        api = client.create_rest_api(
            name=name,
            description=f'API Gateway for {url}',
            endpointConfiguration={'types': ['REGIONAL']}
        )

        # Get the root resource ID
        resources = client.get_resources(restApiId=api['id'])
        root_id = resources['items'][0]['id']

        # Create a resource
        resource = client.create_resource(
            restApiId=api['id'],
            parentId=root_id,
            pathPart='{proxy+}'
        )

        # Create a method
        client.put_method(
            restApiId=api['id'],
            resourceId=resource['id'],
            httpMethod='ANY',
            authorizationType='NONE',
            requestParameters={
                'method.request.path.proxy': True,
                'method.request.header.X-My-X-Forwarded-For': True
            }
        )

        # Set up the integration
        client.put_integration(
            restApiId=api['id'],
            resourceId=resource['id'],
            httpMethod='ANY',
            type='HTTP_PROXY',
            integrationHttpMethod='ANY',
            uri=url + '{proxy}',
            connectionType='INTERNET',
            requestParameters={
                'integration.request.path.proxy': 'method.request.path.proxy',
                'integration.request.header.X-Forwarded-For': 'method.request.header.X-My-X-Forwarded-For'
            }
        )

        # Create a method for the root resource
        client.put_method(
            restApiId=api['id'],
            resourceId=root_id,
            httpMethod='ANY',
            authorizationType='NONE',
            requestParameters={
                'method.request.header.X-My-X-Forwarded-For': True
            }
        )

        # Set up the integration for the root resource
        client.put_integration(
            restApiId=api['id'],
            resourceId=root_id,
            httpMethod='ANY',
            type='HTTP_PROXY',
            integrationHttpMethod='ANY',
            uri=url,
            connectionType='INTERNET',
            requestParameters={
                'integration.request.header.X-Forwarded-For': 'method.request.header.X-My-X-Forwarded-For'
            }
        )

        # Deploy the API
        deployment = client.create_deployment(
            restApiId=api['id'],
            stageName='proxy'
        )

        print(f"https://{api['id']}.execute-api.us-east-1.amazonaws.com/proxy")

    except Exception as e:
        print(f"An error occurred: {str(e)}")

def main():
    parser = argparse.ArgumentParser(description='Create an API Gateway for a given URL.')
    parser.add_argument('--url', help='The URL to proxy through the API Gateway')
    parser.add_argument('--name', help='The name for the API Gateway')

    args = parser.parse_args()

    if not args.url or not args.name:
        parser.print_help()
        sys.exit(1)

    create_api_gateway(args.url, args.name)

if __name__ == '__main__':
    main()