#!/usr/bin/python3
import re
import json
import sys
import ipaddress

# Lista de sufijos de dominio
sufijos_dos_niveles = [
    "com.bo", "gov.bo", "gob.bo", "edu.bo", "org.bo", "info.bo", "net.bo"
]

sufijos_un_nivel = [
    "com", "net", "gov", "edu", "org", "site", "top", "work", "store", "info", "pro", "coop", "bo"
]

# Regular expression for IP address
ip_pattern = re.compile(r'^(\d{1,3}\.){3}\d{1,3}$')

def is_valid_ip(ip):
    try:
        ipaddress.ip_address(ip)
        return True
    except ValueError:
        return False


# Crear expresiones regulares para ambos casos
patron_dos_niveles = re.compile(rf"([\w-]+)\.({'|'.join(map(re.escape, sufijos_dos_niveles))})")
patron_un_nivel = re.compile(rf"([\w-]+)\.({'|'.join(map(re.escape, sufijos_un_nivel))})")

# Función para extraer la entidad de un dominio o nombre de organización
def extraer_entidad(entrada):
    #print(f"Entrada recibida: {entrada}", file=sys.stderr)
    try:
        # Comprobar si la entrada es un JSON
        data = json.loads(entrada)
        #print(f"JSON parseado: {data}", file=sys.stderr)
        
        domain = None
        if "commonName" in data:
            domain = data["commonName"].lstrip('*.')
        elif "organizationName" in data:
            domain = data["organizationName"]
        
        if domain:
            #print(f"Dominio o nombre de organización encontrado: {domain}", file=sys.stderr)
            
            # Check if domain is an IP address
            if ip_pattern.match(domain) or is_valid_ip(domain):
                #print(f"El dominio es una dirección IP: {domain}", file=sys.stderr)
                return None
            
            # Remove 'www.' prefix if present
            domain = domain.removeprefix('www.')
            
            # Primero intentar con dominios de 2 niveles
            match = patron_dos_niveles.search(domain)
            if match:
                #print(f"Coincidencia de 2 niveles: {match.group(1)}", file=sys.stderr)
                return match.group(1)

            # Si no se encontró con dominios de 2 niveles, intentar con dominios de 1 nivel
            match = patron_un_nivel.search(domain)
            if match:
                #print(f"Coincidencia de 1 nivel: {match.group(1)}", file=sys.stderr)
                return match.group(1)
            
            # Si no hay coincidencias con patrones, devolver la primera parte del dominio
            parts = domain.split('.')
            if len(parts) > 1:
                #print(f"Usando la primera parte del dominio: {parts[0]}", file=sys.stderr)
                return parts[0]
            else:
                #print(f"Usando el dominio completo: {domain}", file=sys.stderr)
                return domain

        # Si no hay coincidencias
        #print("No se encontraron coincidencias en el JSON", file=sys.stderr)
        return None

    except json.JSONDecodeError:
        #print("La entrada no es un JSON válido, tratando como dominio", file=sys.stderr)
        # Si no es JSON, tratar como dominio
        
        # Check if input is an IP address
        if ip_pattern.match(entrada) or is_valid_ip(entrada):
            #print(f"La entrada es una dirección IP: {entrada}", file=sys.stderr)
            return None
        
        # Remove 'www.' prefix if present
        entrada = entrada.removeprefix('www.')
        
        # Primero intentar con dominios de 2 niveles
        match = patron_dos_niveles.search(entrada)
        if match:
            #print(f"Coincidencia de 2 niveles: {match.group(1)}", file=sys.stderr)
            return match.group(1)

        # Si no se encontró con dominios de 2 niveles, intentar con dominios de 1 nivel
        match = patron_un_nivel.search(entrada)
        if match:
            #print(f"Coincidencia de 1 nivel: {match.group(1)}", file=sys.stderr)
            return match.group(1)

        # Si no hay coincidencias, devolver la primera parte del dominio
        parts = entrada.split('.')
        if len(parts) > 1:
            #print(f"Usando la primera parte del dominio: {parts[0]}", file=sys.stderr)
            return parts[0]
        else:
            #print(f"Usando el dominio completo: {entrada}", file=sys.stderr)
            return entrada

    except Exception as e:
        print(f"Error inesperado: {e}", file=sys.stderr)
        return None

# Leer la línea de la entrada estándar
try:
    entrada = input().strip()
    if not entrada:
        raise ValueError("La línea de entrada está vacía.")

    # Extraer la entidad
    entidad = extraer_entidad(entrada)
    if entidad:
        print(f"{entidad}")

except Exception as e:
    print(f"Error en la entrada: {e}")