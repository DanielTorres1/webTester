#!/usr/bin/python3
import requests
import argparse
from urllib3.exceptions import InsecureRequestWarning

# Desactivar advertencias de certificados SSL no verificados
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Diccionario 'registro' con las rutas y el texto a buscar
yii= {
    "index.php?r=usuario/": "usuario",
    "index.php?r=usuario/view&id=1": "usuario"
}

phpinfo = {
    "?phpinfo": "PHP Credits",
    "info.php": "PHP Credits",
    "?phpinfo=1": "PHP Credits",
    "dashboard/phpinfo.php": "PHP Credits",
    "php-info.php": "PHP Credits",
    "phpinfo.php": "PHP Credits",
    "phpinfo.php3": "PHP Credits",
    "phpinfo.php4": "PHP Credits",
    "phpinfo.php5": "PHP Credits",
    "phpinfos": "PHP Credits",
    "phpinfos.php": "PHP Credits",
    "xampp/phpinfo.php": "PHP Credits",
}

registro = {
    "index.php?option=com_users&view=registration": "view-registration",
    "index.php/component/users/?view=registration": "view-registration",
    "wp-login.php?action=register": "Powered by WordPress",
    "wp-login.php?action=register": "user_email",
    "wp-register.php": "user_email",
    "user/register": "user_register_form",
}

def check_url(tipo, base_url):
    # Inicializar diccionario a None
    diccionario = None

    if tipo == 'registro':
        diccionario = registro
    elif tipo == 'phpinfo':
        diccionario = phpinfo
    elif tipo == 'yii':
        diccionario = yii

    # Verificar si se ha establecido un diccionario válido
    if diccionario is not None:
        for path, keyword in diccionario.items():
            # Construir la URL completa
            url = base_url + path
            try:
                # Realizar la petición GET ignorando la validación de SSL
                response = requests.get(url, verify=False)
                # Verificar si el contenido de la respuesta contiene el keyword
                if keyword in response.text:
                    print(f"200 OK {url}")
                else:
                    print("404", url)
            except Exception as e:
                print(f"Error al realizar la petición a {url}: {e}")
    else:
        print(f"Tipo '{tipo}' no reconocido. Por favor, use 'registro', 'phpinfo' o 'yii'.")

# Configuración del analizador de argumentos de línea de comando
parser = argparse.ArgumentParser(description='Web Checker Script')
parser.add_argument('--tipo', type=str, help='Tipo de chequeo a realizar')
parser.add_argument('--url', type=str, help='URL base para realizar el chequeo')

# Parsear los argumentos
args = parser.parse_args()

# Ejecutar la función de chequeo con los argumentos proporcionados
check_url(args.tipo, args.url)
