#!/usr/bin/python3
import requests
import argparse
import random
from urllib3.exceptions import InsecureRequestWarning

# Desactivar advertencias de certificados SSL no verificados
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Diccionario 'registro' con las rutas y el texto a buscar
yii = {
    "index.php?r=usuario/": "usuario",
    "index.php?r=usuario/view&id=1": "usuario",   
}

phpinfo = {
    "?phpinfo": "PHP Credits",
    "info.php": "PHP Credits",
    "?phpinfo=1": "PHP Credits",
    "dashboard/phpinfo.php": "PHP Credits",
    "php-info.php": "PHP Credits",
    "phpinfo.php": "PHP Credits",
    "phpinfo.php3": "PHP Credits",
    "phpinfo.php4": "PHP Credits",
    "phpinfo.php5": "PHP Credits",
    "phpinfos": "PHP Credits",
    "phpinfos.php": "PHP Credits",
    "xampp/phpinfo.php": "PHP Credits",
    "test.php": "PHP Credits",
}

registro = {
    "index.php?option=com_users&view=registration": "view-registration",
    "index.php/component/users/?view=registration": "view-registration",
    "wp-login.php?action=register": "Powered by WordPress",
    "wp-login.php?action=register": "user_email",
    "wp-register.php": "user_email",
    "user/register": "user_register_form",
}

# List of popular user agents
user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
]

def check_url(tipo, base_url, proxy=None):
    # Diccionario a utilizar basado en el tipo
    diccionario = None

    if tipo == 'registro':
        diccionario = registro
    elif tipo == 'phpinfo':
        diccionario = phpinfo
    elif tipo == 'yii':
        diccionario = yii

    if diccionario is not None:
        # Elegir un user-agent aleatorio
        user_agent = random.choice(user_agents)
        
        # Headers con 'Referer' configurado como base_url
        headers = {
            "User-Agent": user_agent,
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate, br",
            "Referer": base_url,  # Setting the dynamic referer here
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-origin",
            "Te": "trailers",
            "wssplashuid": "a48a75ba44e08509f84f27d21c93167b9bc181bc.1723826728.1"
        }

        # Configurar proxy si se proporciona
        proxies = None
        if proxy:
            proxies = {"http": proxy, "https": proxy}

        for path, keyword in diccionario.items():
            # Construir la URL completa
            url = base_url + path
            try:
                # Realizar la petición GET ignorando la validación de SSL
                response = requests.get(url, headers=headers, proxies=proxies, verify=False)
                # Verificar si el contenido de la respuesta contiene el keyword
                if keyword in response.text:
                    print(f"200 OK {url}")
                else:
                    print("404", url)
            except Exception as e:
                print(f"Error al realizar la petición a {url}: {e}")
    else:
        print(f"Tipo '{tipo}' no reconocido. Por favor, use 'registro', 'phpinfo' o 'yii'.")

# Configuración del analizador de argumentos de línea de comando
parser = argparse.ArgumentParser(description='Web Checker Script')
parser.add_argument('--tipo', type=str, help='Tipo de chequeo a realizar')
parser.add_argument('--url', type=str, help='URL base para realizar el chequeo')
parser.add_argument('--proxy', type=str, help='Proxy a utilizar en formato host:puerto (opcional)')

# Parsear los argumentos
args = parser.parse_args()

# Ejecutar la función de chequeo con los argumentos proporcionados
check_url(args.tipo, args.url, args.proxy)
