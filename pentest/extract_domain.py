#!/usr/bin/env python3
import json
import re
import sys

def extract_base_domain(domain_data):
    """
    Extrae el dominio base de un objeto JSON que contiene información de dominio.
    El dominio base es el commonName sin subdominios como 'www' ni wildcards '*.'.
    Conserva el dominio de segundo nivel junto con el TLD.
    """
    try:
        # Cargar el string JSON a un diccionario
        if isinstance(domain_data, str):
            data = json.loads(domain_data)
        else:
            data = domain_data
        
        # Obtener el commonName
        common_name = data.get('commonName', '')
        
        if not common_name:
            return None
            
        # Limpiar el commonName:
        # 1. Eliminar wildcards como '*.' al inicio
        # 2. Eliminar subdominios como 'www.'
        domain = common_name.replace('*.', '').replace('www.', '')
        
        # Dividir por puntos
        parts = domain.split('.')
        
        # Si tenemos al menos 2 partes (dominio + TLD)
        if len(parts) >= 2:
            # Tomar las últimas dos partes si el TLD es 'pe' o 'gob.pe'
            if parts[-1] == 'pe' and len(parts) > 2 and (parts[-2] == 'gob' or parts[-2] == 'edu'):
                return '.'.join(parts[-3:])  # ejemplo.gob.pe o ejemplo.edu.pe
            return '.'.join(parts[-2:])  # ejemplo.pe u otros TLD
        return domain
    
    except json.JSONDecodeError:
        print("Error: El input no es un JSON válido", file=sys.stderr)
        return None
    except Exception as e:
        print(f"Error inesperado: {str(e)}", file=sys.stderr)
        return None

if __name__ == "__main__":
    # Leer de stdin
    input_data = sys.stdin.read().strip()
    
    if not input_data:
        print("Error: No se proporcionó entrada", file=sys.stderr)
        sys.exit(1)
    
    base_domain = extract_base_domain(input_data)
    if base_domain:
        print(base_domain)