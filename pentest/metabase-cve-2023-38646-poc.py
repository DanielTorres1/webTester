#!/usr/bin/python3
import requests
import argparse
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

# Suppress only the single warning from urllib3 needed.
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def get_setup_token(ip_address, line_number=None, proxy=None):
    endpoint = "/api/session/properties"
    protocols = ['https://', 'http://']

    # Set up the proxies dictionary if a proxy is specified
    proxies = {"http": proxy, "https": proxy} if proxy else None

    for protocol in protocols:
        url = f"{protocol}{ip_address}{endpoint}"
        try:
            # Use the proxies parameter if a proxy is specified
            response = requests.get(url, verify=False, proxies=proxies)

            if response.status_code == 200:
                data = response.json()
                if "setup-token" in data and data["setup-token"] is not None:
                    print(f"{line_number}. Vulnerable Metabase Instance:-")
                    print(f"             IP: {ip_address}")
                    print(f"             Setup Token: {data['setup-token']}\n")
                else:
                    print(f"{line_number}. Setup token not found or is null for IP: {ip_address}\n")
                return  # exit the function if request was successful
        except requests.exceptions.RequestException as e:
            print(f"Failed to connect using {protocol[:-3].upper()} for {ip_address}. Trying next protocol...")

    print(f"{line_number}. Failed to connect to {ip_address} using both HTTP and HTTPS.\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Check setup token')
    parser.add_argument('--ip', type=str, help='IP address')
    parser.add_argument('--list', type=str, help='Filename containing list of IP addresses')
    parser.add_argument('--proxy', type=str, help='Proxy server address (e.g., http://127.0.0.1:8081)', default=None)
    args = parser.parse_args()

    if args.ip:
        get_setup_token(args.ip, proxy=args.proxy)
    elif args.list:
        with open(args.list, 'r') as f:
            for i, line in enumerate(f, start=1):
                ip_address = line.strip()
                get_setup_token(ip_address, line_number=i, proxy=args.proxy)
    else:
        print("Please provide either an IP address or a file containing a list of IP addresses.")
